<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>exclamation mark</title>
  <icon>https://www.gravatar.com/avatar/7e037328867735376c2d34e1ea620242</icon>
  <subtitle>huanranc</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huanranc.github.io/"/>
  <updated>2018-10-10T15:27:42.820Z</updated>
  <id>https://huanranc.github.io/</id>
  
  <author>
    <name>Joe</name>
    <email>huanranjoe@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>debounce and throttle</title>
    <link href="https://huanranc.github.io/2018/10/10/debounce-and-throttle/"/>
    <id>https://huanranc.github.io/2018/10/10/debounce-and-throttle/</id>
    <published>2018-10-10T14:01:25.000Z</published>
    <updated>2018-10-10T15:27:42.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h3><p>防抖和节流经常在各个场景出现，第一次知道是今年五月，一直想写关于抖动和节流的文章，但是一直没动。网上相关文章已经非常丰富了，我就简单记下自己的理解。</p><h3 id="debounce-防抖"><a href="#debounce-防抖" class="headerlink" title="debounce(防抖)"></a>debounce(防抖)</h3><hr><p>在事件触发n秒之后执行回调函数，在此之间如果重新触发事件，则重新计时。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function ajax(context) &#123;</span><br><span class="line">  console.log(`现在是$&#123;context&#125;`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function debounce(fun, delay) &#123;</span><br><span class="line">  let timer = null</span><br><span class="line">    return function (args) &#123;</span><br><span class="line">        let that = this // 获取作用域</span><br><span class="line">        let _args = args // 获取对象</span><br><span class="line">        clearTimeout(timer) // 清除正在执行的定时器</span><br><span class="line">        timer = setTimeout(function () &#123; // 重新执行定时器</span><br><span class="line">            fun.call(that, _args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let inputb = document.getElementById(&apos;debounce&apos;) </span><br><span class="line">let debounceAjax = debounce(ajax, 1000) </span><br><span class="line"></span><br><span class="line">    inputb.addEventListener(&apos;keyup&apos;, function (e) &#123; </span><br><span class="line">      debounceAjax(e.target.value) </span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>这个例子是让我想到之前做搜索框，想边输入边搜索，但是这样会频繁请求，最后让它只有点击确定才可以触发请求搜索的函数。但是加入防抖，频繁输入并不会触发请求，只有在停止输入的时候才会发起请求，但是在此之间再次输入就会再次发起请求。</p><h3 id="throttle-节流"><a href="#throttle-节流" class="headerlink" title="throttle(节流)"></a>throttle(节流)</h3><p>节流有两种方法，一种是时间戳，一种是定时器。它和防抖的区别，它不是间隔时间执行，它是某段时间内只触发一次。如果这个单位时间内多次触发，也只有一次时间生效。</p><p>接下来的例子是关于时间戳的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function throttle(fun, delay) &#123;</span><br><span class="line">      let last, deferTimer</span><br><span class="line">      return function (args) &#123;</span><br><span class="line">          let that = this</span><br><span class="line">          let _args = arguments</span><br><span class="line">          let now = +new Date()</span><br><span class="line">          if (last &amp;&amp; now &lt; last + delay) &#123;</span><br><span class="line">              clearTimeout(deferTimer)</span><br><span class="line">              deferTimer = setTimeout(function () &#123;</span><br><span class="line">                  last = now</span><br><span class="line">                  fun.apply(that, _args)</span><br><span class="line">              &#125;, delay)</span><br><span class="line">          &#125;else &#123; </span><br><span class="line">/* 当高频繁事件，第一次应该会立即执行（当时间间隔和当前绑定的时间大于delay) */</span><br><span class="line">              last = now</span><br><span class="line">              fun.apply(that,_args)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  let throttleAjax = throttle(ajax, 1000)</span><br><span class="line"></span><br><span class="line">  let inputc = document.getElementById(&apos;throttle&apos;)</span><br><span class="line">  inputc.addEventListener(&apos;keyup&apos;, function(e) &#123;</span><br><span class="line">      throttleAjax(e.target.value)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>定时器的实现</p><p>当 触发时间时，设置一个定时器，再次触发事件,如果定时器存在就不执行,直到delay秒后,定时器执行函数,清空定时器,就可以设置下个定时器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fucntion throttle(func, delay)&#123; </span><br><span class="line">  let timer = null; return funtion()&#123; </span><br><span class="line">    let context = this; </span><br><span class="line">    let args = arguments; </span><br><span class="line"></span><br><span class="line">    if(!timer)&#123; </span><br><span class="line">      timer = setTimeout(function()&#123; </span><br><span class="line">      func.apply(context, args); </span><br><span class="line">      timer = null; &#125;, delay); </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当第一次触发事件时，肯定不会立即执行函数，而是在delay秒后才执行。 </p><p>之后连续不断触发事件，也会每delay秒执行一次。<br>当最后一次停止触发后，由于定时器的delay延迟，可能还会执行一次函数。</p><p>节流也可以用在搜索，可能比防抖更符合我想边搜索边有提示的需求。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>防抖和节流都是防止在某个时间内频繁触发事件，但是二者的原理不同。前者是间隔事件触发，后者是某段时间内只触发一次。</p><p>这两个场景用在输入框，搜索，滚动条都可以。</p><p>具体举例：</p><p>debounce</p><ul><li>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</li><li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</li></ul><p>throttle</p><ul><li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li><li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</li></ul><p>参考文章：</p><p><a href="https://juejin.im/post/5b8de829f265da43623c4261" title="Markdown" target="_blank" rel="noopener">7分钟理解JS的节流、防抖及使用场景</a></p><p><a href="https://blog.csdn.net/sml115/article/details/81280101" title="Markdown" target="_blank" rel="noopener">JS简单实现防抖和节流</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始&quot;&gt;&lt;a href=&quot;#初始&quot; class=&quot;headerlink&quot; title=&quot;初始&quot;&gt;&lt;/a&gt;初始&lt;/h3&gt;&lt;p&gt;防抖和节流经常在各个场景出现，第一次知道是今年五月，一直想写关于抖动和节流的文章，但是一直没动。网上相关文章已经非常丰富了，我就简单记下自己
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://huanranc.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于搜索框的正则</title>
    <link href="https://huanranc.github.io/2018/05/21/page/"/>
    <id>https://huanranc.github.io/2018/05/21/page/</id>
    <published>2018-05-21T14:31:28.000Z</published>
    <updated>2018-05-21T15:24:52.767Z</updated>
    
    <content type="html"><![CDATA[<p>起因是包子发给我一段代码，那段代码不仔细看是没什么问题得。是关于<br><a href="https://www.cib.com.cn/search/index.do" target="_blank" rel="noopener">兴业银行</a>网站得搜索框得一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.input-search&quot;).keyup(function(e) &#123;</span><br><span class="line"></span><br><span class="line">      var currKey = 0</span><br><span class="line">        , e = e || event;</span><br><span class="line">      currKey = e.keyCode || e.which || e.charCode;</span><br><span class="line">      if (currKey &gt;= 37 &amp;&amp; currKey &lt;= 40) &#123;</span><br><span class="line">          return false</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      var text = $(this).val();</span><br><span class="line">      var temp = text;</span><br><span class="line">      text = text.replace(/[^0-9\a-\z\A-Z\u4e00-\u9fa5 ]/, &quot;&quot;);</span><br><span class="line">      if (text != &quot;&quot; &amp;&amp; text != temp) &#123;</span><br><span class="line">          var loc = getLocation(this);</span><br><span class="line">          $(this).val(text);</span><br><span class="line">          if (temp.length - text.length == 1) &#123;</span><br><span class="line">              loc = loc - 1</span><br><span class="line">          &#125;</span><br><span class="line">          setLocation(this, loc)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>仔细看了下他那段replace得代码，<code>text.replace(/[^0-9\a-\z\A-Z\u4e00-\u9fa5 ]/, &quot;&quot;)</code>。这段的意思是输入框中输入的除了数字、字母和中文以外，都会被替换为””，即删掉。但是这样就会存在一个问题。如果用户的输入法是时时输入的情况</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./search.gif" alt="动图" title="">                </div>                <div class="image-caption">动图</div>            </figure><p>(动图不会搞，勉强看看)<br>就是当用户的输入法是时时输入时，用户实时输入的功能是会有英文字母逗留在输入框内，当选定相应文字是英文字母会被删掉而选中的文字被保留。而这个搜素框会被实时输入法中的英文字母，在用户选择相应文字时候也被保留下来。</p><p>首先，这个设计需求出发点是正确的。<br>1.想让用户输入的时候，限制用户其他内容，只能输入字母和中文。所以他在想这个需求的时候，通过replace想要只留下字母和中文。但是输入法中有个实时输入，英文字母会留在输入框中<br>2.当表单提交以后，数据会提交到服务端的数据库中，如果有其他字符出现，很大可能会出现乱码。如果和sql语句混合在一起，还会影响到数据库，有可能不小心用户如果输入<code>&#39;;DROP DATABASES;&#39;</code>，说不定会把整个数据库删掉哦。</p><p>大概记录下，至于其中原理我也是听包子大概讲了下，还没去深究原因，和想解决办法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;起因是包子发给我一段代码，那段代码不仔细看是没什么问题得。是关于&lt;br&gt;&lt;a href=&quot;https://www.cib.com.cn/search/index.do&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;兴业银行&lt;/a&gt;网站得搜索框得一段代码&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Class name semantics</title>
    <link href="https://huanranc.github.io/2017/09/12/my-blog/"/>
    <id>https://huanranc.github.io/2017/09/12/my-blog/</id>
    <published>2017-09-12T15:03:01.000Z</published>
    <updated>2018-03-19T15:33:35.820Z</updated>
    
    <content type="html"><![CDATA[<h4 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h4><p>现在，我对CSS类名语义化的理解是，方便给程序员甚至是用户阅读，还有后期代码的维护和重构。因此，对于类名的编写，我们需要不仅能够表示出这个div的在结构中处于什么位置，还要后期维护，不需要修改类名或者在结构上类名会产生误导，不利于阅读。</p><h4 id="类名可以是辅助类名、常用类名"><a href="#类名可以是辅助类名、常用类名" class="headerlink" title="类名可以是辅助类名、常用类名"></a>类名可以是辅助类名、常用类名</h4><hr><p>在bootstrap中，可以看到类名可以在同一结构中反复使用，例如.bg-primary、.display-3<br>、.container、.btn、.clearfix。这些类名不仅可以清楚表现出，它的作用效果还可以方便维护。而且，会发现它的类名比较偏向它表达出来的功能，就像.bg-primary，它是背景颜色，但是它却不是.bg-red、.bg-yellow等等，它是.bg-primary代表主色调，没有明确说出颜色，如果后期需要修改颜色，直接在类名修改，HTML结构不需要修改也不会影响阅读。</p><p>我想到我之前练习的页面，我就不习惯先思考整个页面，然后提取公共样式的类，我都下意识一个div一个样式，照成重复代码很多。或者后期提取公共样式，类名的命名不够好，只能适用于header部分，section部分、article部分，不能适用在整个页面，甚至有多个页面的情况下。这样会照成代码不必要的重复，后期维护也麻烦，要到每个内容块下的类里面修改。</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><hr><p>虽然类名的命名很方便，但是也不能盲目的使用类名，有的标签能清楚的告诉这个内容块代表的是什么，就不必要在使用类名，当然也许需求需要存在类名。如标签h1，h1标签可以告诉我们，这块的内容是网页的大标题，我们就不需要给它类名，像什么huge-title。HTML5新增了语义化标签可以使用了，我们就可以直接使用它，不需要借助div+类名的方式表达这内容块是什么。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;article&quot;&gt;&lt;/div&gt;</span><br><span class="line">/*可以直接使用article标签*/</span><br><span class="line">&lt;article&gt;&lt;/article&gt;</span><br></pre></td></tr></table></figure><p>后者有利于搜索引擎的解析，有助于爬虫抓取更多信息，也方便和其他设备建立连接，如屏幕阅读器。当然也不能乱用，例如main标签只允许在页面中出现一次，你就不可以在页面中多次使用。</p><h4 id="类名处于的结构"><a href="#类名处于的结构" class="headerlink" title="类名处于的结构"></a>类名处于的结构</h4><hr><p>页面一般分为头部，内容，底部。因此我们可能会出现头部有个标题，有个段落，内容也有标题，有个段落，底部也有个标题有个段落。因此，我们可以给类名的命名方式让人感觉又层次感</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;</span><br><span class="line">    &lt;h1&gt;标题&lt;/h1&gt;</span><br><span class="line">    &lt;p class=&quot;header-summary&quot;&gt;段落&lt;/p&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div class=&quot;site-main&quot;&gt;</span><br><span class="line">    &lt;h2 class=&quot;main-title&quot;&gt;标题&lt;/h2&gt;</span><br><span class="line">    &lt;p class=&quot;main-summary&quot;&gt;段落&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">    &lt;h2 class=&quot;footer-title&quot;&gt;标题&lt;/h2&gt;</span><br><span class="line">    &lt;p class=&quot;footer-summary&quot;&gt;段落&lt;/p&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><p>ps:关于类名的命名，我还正在学习中，有时候还是会不懂怎么给内容块正确的命名比较好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;我的看法&quot;&gt;&lt;a href=&quot;#我的看法&quot; class=&quot;headerlink&quot; title=&quot;我的看法&quot;&gt;&lt;/a&gt;我的看法&lt;/h4&gt;&lt;p&gt;现在，我对CSS类名语义化的理解是，方便给程序员甚至是用户阅读，还有后期代码的维护和重构。因此，对于类名的编写，我们需要不仅
      
    
    </summary>
    
    
      <category term="CSS" scheme="https://huanranc.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
