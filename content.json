[{"title":"debounce and throttle","date":"2018-10-10T14:01:25.000Z","path":"2018/10/10/debounce-and-throttle/","text":"初始防抖和节流经常在各个场景出现，第一次知道是今年五月，一直想写关于抖动和节流的文章，但是一直没动。网上相关文章已经非常丰富了，我就简单记下自己的理解。 debounce(防抖) 在事件触发n秒之后执行回调函数，在此之间如果重新触发事件，则重新计时。 1234567891011121314151617181920212223function ajax(context) &#123; console.log(`现在是$&#123;context&#125;`);&#125;function debounce(fun, delay) &#123; let timer = null return function (args) &#123; let that = this // 获取作用域 let _args = args // 获取对象 clearTimeout(timer) // 清除正在执行的定时器 timer = setTimeout(function () &#123; // 重新执行定时器 fun.call(that, _args) &#125;, delay) &#125;&#125;let inputb = document.getElementById(&apos;debounce&apos;) let debounceAjax = debounce(ajax, 1000) inputb.addEventListener(&apos;keyup&apos;, function (e) &#123; debounceAjax(e.target.value) &#125;) 这个例子是让我想到之前做搜索框，想边输入边搜索，但是这样会频繁请求，最后让它只有点击确定才可以触发请求搜索的函数。但是加入防抖，频繁输入并不会触发请求，只有在停止输入的时候才会发起请求，但是在此之间再次输入就会再次发起请求。 throttle(节流)节流有两种方法，一种是时间戳，一种是定时器。它和防抖的区别，它不是间隔时间执行，它是某段时间内只触发一次。如果这个单位时间内多次触发，也只有一次时间生效。 接下来的例子是关于时间戳的 123456789101112131415161718192021222324252627function throttle(fun, delay) &#123; let last, deferTimer return function (args) &#123; let that = this let _args = arguments let now = +new Date() if (last &amp;&amp; now &lt; last + delay) &#123; clearTimeout(deferTimer) deferTimer = setTimeout(function () &#123; last = now fun.apply(that, _args) &#125;, delay) &#125;else &#123; /* 当高频繁事件，第一次应该会立即执行（当时间间隔和当前绑定的时间大于delay) */ last = now fun.apply(that,_args) &#125; &#125; &#125; let throttleAjax = throttle(ajax, 1000) let inputc = document.getElementById(&apos;throttle&apos;) inputc.addEventListener(&apos;keyup&apos;, function(e) &#123; throttleAjax(e.target.value) &#125;) 定时器的实现 当 触发时间时，设置一个定时器，再次触发事件,如果定时器存在就不执行,直到delay秒后,定时器执行函数,清空定时器,就可以设置下个定时器。 12345678910111213fucntion throttle(func, delay)&#123; let timer = null; return funtion()&#123; let context = this; let args = arguments; if(!timer)&#123; timer = setTimeout(function()&#123; func.apply(context, args); timer = null; &#125;, delay); &#125; &#125; &#125; 当第一次触发事件时，肯定不会立即执行函数，而是在delay秒后才执行。 之后连续不断触发事件，也会每delay秒执行一次。当最后一次停止触发后，由于定时器的delay延迟，可能还会执行一次函数。 节流也可以用在搜索，可能比防抖更符合我想边搜索边有提示的需求。 总结防抖和节流都是防止在某个时间内频繁触发事件，但是二者的原理不同。前者是间隔事件触发，后者是某段时间内只触发一次。 这两个场景用在输入框，搜索，滚动条都可以。 具体举例： debounce search搜索联想，用户在不断输入值时，用防抖来节约请求资源。 window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次 throttle 鼠标不断点击触发，mousedown(单位时间内只触发一次) 监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断 参考文章： 7分钟理解JS的节流、防抖及使用场景 JS简单实现防抖和节流","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://huanranc.github.io/tags/JavaScript/"}]},{"title":"关于搜索框的正则","date":"2018-05-21T14:31:28.000Z","path":"2018/05/21/page/","text":"起因是包子发给我一段代码，那段代码不仔细看是没什么问题得。是关于兴业银行网站得搜索框得一段代码 123456789101112131415161718192021$(&quot;.input-search&quot;).keyup(function(e) &#123; var currKey = 0 , e = e || event; currKey = e.keyCode || e.which || e.charCode; if (currKey &gt;= 37 &amp;&amp; currKey &lt;= 40) &#123; return false &#125; var text = $(this).val(); var temp = text; text = text.replace(/[^0-9\\a-\\z\\A-Z\\u4e00-\\u9fa5 ]/, &quot;&quot;); if (text != &quot;&quot; &amp;&amp; text != temp) &#123; var loc = getLocation(this); $(this).val(text); if (temp.length - text.length == 1) &#123; loc = loc - 1 &#125; setLocation(this, loc) &#125; &#125;); 仔细看了下他那段replace得代码，text.replace(/[^0-9\\a-\\z\\A-Z\\u4e00-\\u9fa5 ]/, &quot;&quot;)。这段的意思是输入框中输入的除了数字、字母和中文以外，都会被替换为””，即删掉。但是这样就会存在一个问题。如果用户的输入法是时时输入的情况 动图 (动图不会搞，勉强看看)就是当用户的输入法是时时输入时，用户实时输入的功能是会有英文字母逗留在输入框内，当选定相应文字是英文字母会被删掉而选中的文字被保留。而这个搜素框会被实时输入法中的英文字母，在用户选择相应文字时候也被保留下来。 首先，这个设计需求出发点是正确的。1.想让用户输入的时候，限制用户其他内容，只能输入字母和中文。所以他在想这个需求的时候，通过replace想要只留下字母和中文。但是输入法中有个实时输入，英文字母会留在输入框中2.当表单提交以后，数据会提交到服务端的数据库中，如果有其他字符出现，很大可能会出现乱码。如果和sql语句混合在一起，还会影响到数据库，有可能不小心用户如果输入&#39;;DROP DATABASES;&#39;，说不定会把整个数据库删掉哦。 大概记录下，至于其中原理我也是听包子大概讲了下，还没去深究原因，和想解决办法。","tags":[]},{"title":"Class name semantics","date":"2017-09-12T15:03:01.000Z","path":"2017/09/12/my-blog/","text":"我的看法现在，我对CSS类名语义化的理解是，方便给程序员甚至是用户阅读，还有后期代码的维护和重构。因此，对于类名的编写，我们需要不仅能够表示出这个div的在结构中处于什么位置，还要后期维护，不需要修改类名或者在结构上类名会产生误导，不利于阅读。 类名可以是辅助类名、常用类名 在bootstrap中，可以看到类名可以在同一结构中反复使用，例如.bg-primary、.display-3、.container、.btn、.clearfix。这些类名不仅可以清楚表现出，它的作用效果还可以方便维护。而且，会发现它的类名比较偏向它表达出来的功能，就像.bg-primary，它是背景颜色，但是它却不是.bg-red、.bg-yellow等等，它是.bg-primary代表主色调，没有明确说出颜色，如果后期需要修改颜色，直接在类名修改，HTML结构不需要修改也不会影响阅读。 我想到我之前练习的页面，我就不习惯先思考整个页面，然后提取公共样式的类，我都下意识一个div一个样式，照成重复代码很多。或者后期提取公共样式，类名的命名不够好，只能适用于header部分，section部分、article部分，不能适用在整个页面，甚至有多个页面的情况下。这样会照成代码不必要的重复，后期维护也麻烦，要到每个内容块下的类里面修改。 标签 虽然类名的命名很方便，但是也不能盲目的使用类名，有的标签能清楚的告诉这个内容块代表的是什么，就不必要在使用类名，当然也许需求需要存在类名。如标签h1，h1标签可以告诉我们，这块的内容是网页的大标题，我们就不需要给它类名，像什么huge-title。HTML5新增了语义化标签可以使用了，我们就可以直接使用它，不需要借助div+类名的方式表达这内容块是什么。例如 123&lt;div class=&quot;article&quot;&gt;&lt;/div&gt;/*可以直接使用article标签*/&lt;article&gt;&lt;/article&gt; 后者有利于搜索引擎的解析，有助于爬虫抓取更多信息，也方便和其他设备建立连接，如屏幕阅读器。当然也不能乱用，例如main标签只允许在页面中出现一次，你就不可以在页面中多次使用。 类名处于的结构 页面一般分为头部，内容，底部。因此我们可能会出现头部有个标题，有个段落，内容也有标题，有个段落，底部也有个标题有个段落。因此，我们可以给类名的命名方式让人感觉又层次感 123456789101112&lt;header&gt; &lt;h1&gt;标题&lt;/h1&gt; &lt;p class=&quot;header-summary&quot;&gt;段落&lt;/p&gt;&lt;/header&gt;&lt;div class=&quot;site-main&quot;&gt; &lt;h2 class=&quot;main-title&quot;&gt;标题&lt;/h2&gt; &lt;p class=&quot;main-summary&quot;&gt;段落&lt;/p&gt;&lt;/div&gt;&lt;footer&gt; &lt;h2 class=&quot;footer-title&quot;&gt;标题&lt;/h2&gt; &lt;p class=&quot;footer-summary&quot;&gt;段落&lt;/p&gt;&lt;/footer&gt; ps:关于类名的命名，我还正在学习中，有时候还是会不懂怎么给内容块正确的命名比较好。","tags":[{"name":"CSS","slug":"CSS","permalink":"https://huanranc.github.io/tags/CSS/"}]}]